#!/usr/bin/env bash
#
# service -- control (start/stop/etc.) or list system services in Slackware
#
# MIT License
# 
# Copyright (c) 2023 Justin Teague
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

set -eu
LC_ALL=C

PRGNAM="${0##*/}"
VERSION=0.1.0

ROOT="${ROOT:-/}"
RC_DIR="${ROOT%*/}/etc/rc.d"
VERBOSE=0

#### FUNCTIONS ####
version() {
  cat <<EOF
$PRGNAM -- Version $VERSION

EOF
}

usage() {
  cat <<EOF
$(version)
Usage:
  $PRGNAM [-v] -e | -l
  $PRGNAM [-v] <rc script> start|stop|etc.
  $PRGNAM -h | -V

  -e    Show services that are enabled
  -l    List all scripts in /etc/rc.d
  -v    Verbose

EOF
}

err() {
  printf %s\\n "ERROR: $*" >&2
}

warn() {
  if [ "$VERBOSE" -gt 0 ]; then
    printf %s\\n "WARN: $*" >&2
  fi
}

inf() {
  if [ "$VERBOSE" -gt 0 ]; then
    printf %s\\n "$*" >&2
  fi
}

is_system_script() {
  for s in 0 4 6 K M S; do
    if grep -q "$1" "$RC_DIR/rc.$s" >/dev/null 2>&1; then
      return 0
    fi
  done
  return 1
}

is_rc_local() {
  if grep -q "$1" "$RC_DIR/rc.local" >/dev/null 2>&1; then
    return 0
  fi
  return 1
}

is_rc_local_shutdown() {
  if grep -q "$1" "$RC_DIR/rc.local_shutdown" >/dev/null 2>&1; then
    return 0
  fi
  return 1
}

generate_rc_local() {
  cat <<EOF

# $2 $1
if [ -x $1 ]; then
  $1 $2
fi

EOF
}

list_all_services() {
  # Show rc files in base RC_DIR
  local base_cnt=0
  for s in "$RC_DIR"/rc.*; do
    if [ "$base_cnt" -eq 0 ]; then
      inf "From $RC_DIR:"
      base_cnt=$((base_cnt + 1))
    fi
    printf %s\\n "${s##*/}"
  done

  # Show rc files in rc.0, rc.1, rc.2, etc. (less common)
  for r in 0 1 2 3 4 5 6; do
    base_cnt=0
    for s in "$RC_DIR"/rc"$r".d/rc.*; do
      case "$s" in *rc.\*) continue ;; esac
      if [ "$base_cnt" -eq 0 ]; then
        inf "From $RC_DIR/rc.$r:"
        base_cnt=$((base_cnt + 1))
      fi
      printf %s\\n "${s##*/}"
    done
  done
}

list_enabled_services() {
  local base_count=0
  for e in "$RC_DIR"/rc.*; do
    if [ -x "$e" ]; then
      if [ "$base_count" -eq 0 ]; then
        inf "From $RC_DIR:"
        base_count=$((base_count + 1))
      fi
      printf %s\\n "${e##*/}"
    fi
  done

  for r in 0 1 2 3 4 5 6; do
    base_count=0
    for s in "$RC_DIR"/rc"$r".d/rc.*; do
      if [ -x "$s" ]; then
        if [ "$base_count" -eq 0 ]; then
          inf "From $RC_DIR/rc$r.d:"
          base_count=$((base_count + 1))
        fi
      printf %s\\n "${s##*/}"
      fi
    done
  done
}

service_cmd() {
  local service_name="$1"
  local cmd="${2:-}"
  local service_path=""

  case "$service_name" in
    rc.*) : ;;
    *) service_name="rc.$service_name" ;;
  esac

  if [ -f "$RC_DIR/$service_name" ]; then
    service_path="$RC_DIR/$service_name"
  else
    for r in 0 1 2 3 4 5 6; do
      if [ -f "$RC_DIR/rc$r.d/$service_name" ]; then
        service_path="$RC_DIR/rc$r.d/$service_name"
        break
      fi
    done
  fi

  if [ -z "$service_path" ]; then
    err "$service_name not found."
    return 1
  fi

  case "$cmd" in
    enable)
      if ! chmod +x "$service_path"; then
        err "cannot enable $service_name"
        return 1
      fi
      inf "$service_name enabled"
      if ! is_system_script "$service_path"; then
        if ! is_rc_local "$service_path"; then
          printf "%s doesn't appear to be a system script\n" "$service_name"
          printf "Do you want to add the following to rc.local?\n"
          generate_rc_local "$service_path" "start"
          printf 'Add %s to rc.local? (y/n) ' "$service_name"
          while read -r prompt; do
            case "$prompt" in
              y | Y)
                generate_rc_local "$service_path" "start" \
                  >>"$RC_DIR/rc.local"
                break
                ;;
              n | N)
                break
                ;;
            esac
          done
        fi
        if ! is_rc_local_shutdown "$service_name"; then
          printf "%s doesn't appear to be a system script\n" "$service_name"
          printf "Do you want to add the following to rc.local_shutdown?\n"
          generate_rc_local "$service_path" "stop"
          printf 'Add %s to rc.local_shutdown? (y/n) ' "$service_path"
          while read -r prompt; do
            case "$prompt" in
              y | Y | yes | Yes | YES)
                generate_rc_local "$service_path" "stop" \
                  >>"$RC_DIR/rc.local_shutdown"
                break
                ;;
              n | N | no | No | NO)
                break
                ;;
              *) true ;;
            esac
          done
        fi
      fi
      return
      ;;

    disable)
      if ! chmod -x "$service_path"; then
        err "cannot disable $service_name"
        return 1
      fi
      inf "$service_name disabled"
      return
      ;;
  esac

  if ! [ -x "$service_path" ]; then
    err "$service_name is not enabled"
    return 1
  fi

  "$service_path" "$cmd"
}

#### ENTRYPOINT ####
main() {
  # Parse flags
  local cmd=""
  while getopts :ehlvV flag; do
    case "$flag" in
      e) cmd_list_enabled=1 ;;
      l) cmd_list_all=1 ;;
      v) VERBOSE=$((VERBOSE + 1)) ;;
      V) version ; return ;;
      h) usage ; return ;;
      *) usage ; return 1 ;;
    esac
  done
  shift $((OPTIND - 1))

  if [ -n "${cmd_list_enabled:-}" ]; then
    list_enabled_services
    return
  fi

  if [ -n "${cmd_list_all:-}" ]; then
    list_all_services
    return
  fi

  if [ -n "${1:-}" ]; then
    service_cmd "$1" "${2:-}"
    return
  fi

  usage
  return 1
}
main "$@"
